# /Zakiev_Marat_dz_10/zakiev_marat_lesson_10_3.py
# zakiev_marat_lesson_10_3
#
# 3. Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка».
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__floordiv__, __truediv__()).
# Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и округление до целого числа деления клеток, соответственно.
# - Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# - Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять, только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# - Умножение. Создаётся общая клетка из двух.
# Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# - Деление. Создаётся общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5.
# В этом случае метод make_order() вернёт строку: *****\n*****\n**.
#
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.
#

#
class Cell:
    def __init__(self, size: int):
        self.size = size

    def __add__(self, other):
        return self.size + other.size

    def __sub__(self, other):
        sub = self.size - other.size
        if sub <= 0:
            return 'клетки не стало'
        else:
            return sub

    def __truediv__(self, other):
        return self.size // other.size

    def __mul__(self, other):
        return self.size * other.size

    def make_order(self, row):
        result = ''
        for i in range(int(self.size / row)):
            result += '*' * row + '\n'
        result += '*' * (self.size % row) + '\n'
        return result


def main():
    cell = Cell(18)
    second_cell = Cell(8)
    third_cell = Cell(20)
    print('Сложение клеток cell и second_cell:')
    print(cell + second_cell)
    print('Вычитание клетки second_cell из cell:')
    print(cell - second_cell)
    print('Вычитание клетки third_cell из second_cell:')
    print(second_cell - third_cell)
    print('Умножение клеток cell и second_cell:')
    print(cell * second_cell)
    print('Деление клетки cell на second_cell:')
    print(cell / second_cell)
    print('ячейка cell по рядам:')
    print(cell.make_order(5))


if __name__ == '__main__':
    main()
