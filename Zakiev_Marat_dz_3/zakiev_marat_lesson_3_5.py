# 5. Реализовать функцию get_jokes(), возвращающую n шуток,
# сформированных из трех случайных слов,
# взятых из трёх списков (по одному из каждого):
# nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
# adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
# adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]
#
# Например:
# >>> get_jokes(2)
# ["лес завтра зеленый", "город вчера веселый"]
#
# Документировать код функции.
# Сможете ли вы добавить еще один аргумент — флаг,
# разрешающий или запрещающий повторы слов в шутках
# (когда каждое слово можно использовать только в одной шутке)?
# Сможете ли вы сделать аргументы именованными?

# ################# import #####################
from random import choice
# from random import sample

# ------------------functions------------------

def get_jokes(n):
    nouns = ['автомобиль', 'лес', 'огонь', 'город', 'дом']
    adverbs = ['сегодня', 'вчера', 'завтра', 'позавчера', 'ночью']
    adjectives = ['веселый', 'яркий', 'зеленый', 'утопичный', 'мягкий']
    for i in range(n):
        fanny = f'"{choice(nouns)} {choice(adverbs)} {choice(adjectives)}"'
        print(fanny,  end=' ')


def main():
    n = 4  # количество шуток
    get_jokes(n)


if __name__ == '__main__':
    main()

# думаю, что здесь надо было каким-то образом использовать sample (из random),
# но я так и не придумал как сделать перебор,
# чтоб каждый элемент sample(nouns, n) + sample(adverbs, n) + sample(adjectives, n) собрался соответственно
# можно конечно все это сделать с помощью if и проверять каждый раз повтор/не_повтор,
# но думаю что-то можно другое использовать (map/zip...), но не придумал как их тут использовать...
