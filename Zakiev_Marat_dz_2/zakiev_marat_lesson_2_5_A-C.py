# 5. Создать вручную список, содержащий цены на товары (10–20 товаров), например:
# [57.8, 46.51, 97, ...]
# A. Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде
# <r> руб <kk> коп (например «5 руб 04 коп»). Подумать, как из цены получить рубли и копейки,
# как добавить нули, если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп
# или 00 коп).
# B. Вывести цены, отсортированные по возрастанию, новый список не создавать (доказать, что
# объект списка после сортировки остался тот же).
# C. Создать новый список, содержащий те же цены, но отсортированные по убыванию.
# D. Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по
# возрастанию, написав минимум кода?

# 5. Создать вручную список, содержащий цены на товары (10–20 товаров), например:
# [57.8, 46.51, 97, ...]
# list_prices = [745.02, 20.52, 578.85, 82.8, 7.26, 33.7, 220.99, 10.45, 657.58, 4.6, 10.24, 10.45, 820.53, 34.88,
# 269.81, 65.57, 964.46, 29.73, 633.08, 59.44]
list_prices = [105.22, 56.48, 34.0, 76.17, 152.49, 93.02, 413.36, 14.68, 55, 0.2, 91.04,
               720.45, 70.34, 572.86, 266.63, 38.88, 412.94, 891.0, 7.27, 934.02, 0.38]
print('Исходный список цен:')
print(list_prices)  # исходный список цен
print('_' * 150)
price_str = ''  # создадим пустую строку
for i in list_prices:
    # приводим к виду <r> руб <kk> коп (например «5 руб 04 коп») и добавляем в строку price_str
    if i == list_prices[-1]:
        price_str += f'«{int(i // 1)} руб. {int(i * 100 % 100):02} коп.»'
    else:
        price_str += f'«{int(i // 1)} руб. {int(i * 100 % 100):02} коп.»,'
    # исправил {int(i // 1)} было {int(i // 100)}
# A. Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде
# <r> руб <kk> коп (например «5 руб 04 коп»). Подумать, как из цены получить рубли и копейки,
# как добавить нули, если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп
# или 00 коп).
print('A. Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде <r> руб <kk> коп')
print('(например «5 руб 04 коп»).')
print(price_str)  # выводим полученную строку

print()
print('B. Вывести цены, отсортированные по возрастанию, новый список не создавать')
print('(доказать, что объект списка после сортировки остался тот же).')
print('Исходный список:')
print(list_prices)  # исходный список
print('id списка до сортировки:', id(list_prices))  # id списка до сортировки
id_list_prices = id(list_prices)  # id списка до сортировки
list_prices.sort()  # сортировка списка по возрастанию
print('Отсортированный список:')
print(list_prices)  # отсортированный список
print('id списка после сортировки:', id(list_prices))  # id списка после сортировки
if id_list_prices == id(list_prices):
    # если id списка до сортировки и после равны, то:
    print('объект списка после сортировки остался тот же')
else:
    # иначе (если не равны):
    print('объект списка после сортировки изменился')

# C. Создать новый список, содержащий те же цены, но отсортированные по убыванию.
print()
print('C. Создать новый список, содержащий те же цены, но отсортированные по убыванию.')
descending_list = list(reversed(list_prices))
print(descending_list)
print('id исходного списка:', id(list_prices))
print('id отсортированного списка:', id(descending_list))

# well done!
