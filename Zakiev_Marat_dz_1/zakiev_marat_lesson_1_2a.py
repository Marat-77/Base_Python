# 2. Создать список, состоящий из кубов нечётных чисел от 1 до 1000 (куб X - третья степень числа X):
# a. Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.
# Например, число «19 ^ 3 = 6859» будем включать в сумму,
# так как 6 + 8 + 5 + 9 = 28 – делится нацело на 7.
# Внимание: использовать только арифметические операции!

# прогнать через цикл от 1 до 1000 с шагом 2 и
# возвести в 3 степень и добавить в список "cube_odd_numbers"
cube_odd_numbers = []  # приготовим пустой список для кубов нечетных чисел
for mz_number in range(1, 1000, 2):
    mz_number = mz_number ** 3  # возведение в 3 степень
    cube_odd_numbers.append(mz_number)  # добавление в список

# а. выбрать из списка "cube_odd_numbers" числа сумма цифр которых делится нацело на 7.
sum_mz_seven = []  # приготовим пустой список для чисел сумма цифр которых делится нацело на 7.
for mz_number in cube_odd_numbers:
    x = 0
    y = mz_number
    while mz_number > 0:
        x = x + mz_number % 10
        mz_number //= 10
    if x % 7 == 0:
        sum_mz_seven.append(y)  # добавление y в список sum_mz_seven

# суммирование чисел списка sum_mz_seven
sum_i_mz_sev = 0
for i_mz_sev in sum_mz_seven:
    sum_i_mz_sev = sum_i_mz_sev + i_mz_sev

# вывод результата
print('а. Сумма чисел из списка (кубов нечетных чисел), сумма цифр которых делится нацело на 7:')
print(sum_i_mz_sev)

# разбираясь с этой задачей сначала что-то совсем перемудрил, но потом разобрался.
# после того как сделал 2.c, понял, что можно было в этом задании так же красиво сделать,
# но переделывать (рефакторинг как я понял это называют) не стал - этот вариант как память.
